** Model Class Annotataion

1. @NoArgsConstructor
- 빈 생성자를 생성해준다.

2. @AllArgsConstructor
- 모든 매개변수를 필요로 하는 생성자를 생성해준다.

3. @Builder
- Builder 패턴을 사용 가능하게 해준다.

4. @Data
- Getter Setter 를 한번에 생성해준다.

5. @Entity (ORM)
- 데이터베이스 테이블을 생성해준다.
- 제일 클래스명과 가까이 위치 시키는게 좋다.

6. @DynamicInsert
- 데이터 삽입 시 null 인 필드를 제외시켜준다.
- Default 값 삽입 시 null 값이 들어가는 경우를 막아준다.
- ex. insert into User values("id", "password", "email", null);

=================================================================================
** 연관관계
User
-------------------------------------------------------------------
 idx | username | email | password | role |
-------------------------------------------------------------------
     |          |       |          |      |
-------------------------------------------------------------------

Board
-------------------------------------------------------------------
 idx | title | content | user_id(FK) | created_date
-------------------------------------------------------------------
     |       |         |             |
-------------------------------------------------------------------
@OneToMany(mappedBy = "board", fetch = FetchType.EAGER)
private List<Reply> replies;

reply_id(FK) 가 있을 경우 다중 값을 필드에 넣을 수 없기 때문에 데이터베이스에 추가하지 않는다.
ex. reply_id(FK) : [1, 4, 6]

Reply
-------------------------------------------------------------------
 idx | content | user_id(FK) | board_id(FK) | created_date
-------------------------------------------------------------------
     |         |             |              |
-------------------------------------------------------------------
=================================================================================
** 무한 참조 방지
- 데이터베이스에서 값을 가져올 때 Jackson 라이브러리가 실행되고 getter 메소드를 사용해 데이터를 가져온다.
이 경우 무한 참조가 발생한다.
1. @JsonIgnore
